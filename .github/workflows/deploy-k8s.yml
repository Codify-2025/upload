# 워크플로우 이름
name: CI/CD for upload in k8s
# 1. 실행 조건: deploy-k8s 브랜치에 push가 발생했을 때만 실행
on:
  push:
    branches: [ "deploy-k8s" ]
# 워크플로우 전체에서 사용할 환경 변수
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.docker_build.outputs.image_tag }}
    env:
      TAG: ${{ github.run_id }} 
    permissions:
      contents: read
      packages: write # Docker 이미지 푸시를 위해 필요
    steps:
      - name: 1. 소스 코드 체크아웃
        uses: actions/checkout@v4
        
      - name: 2. JDK 17 설치
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: 3. Gradle 실행 권한 부여 및 빌드
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test
          
      - name: 4. 완전 디버깅 및 Docker 로그인
        run: |
          echo "=== 환경 정보 ==="
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          echo "Runner OS: $(uname -a)"
          echo "Docker version: $(docker --version)"
          echo ""
          
          echo "=== Secrets 검증 ==="
          echo "Username exists: ${{ secrets.DEPLOY_USERNAME != '' }}"
          echo "Password exists: ${{ secrets.DEPLOY_PASSWORD != '' }}"
          echo "Username: '${{ secrets.DEPLOY_USERNAME }}'"
          echo "Username length: ${#DEPLOY_USERNAME}"
          echo "Password length: ${#DEPLOY_PASSWORD}"
          echo "Password starts with: ${DEPLOY_PASSWORD:0:3}..."
          echo ""
          
          echo "=== Docker 상태 확인 ==="
          docker info | head -10 || echo "Docker info failed"
          echo ""
          
          echo "=== Docker Hub 연결 테스트 ==="
          curl -s -I https://index.docker.io/v1/ | head -5 || echo "Docker Hub connection failed"
          curl -s -I https://registry-1.docker.io/v2/ | head -5 || echo "Registry connection failed"
          echo ""
          
          echo "=== 기존 Docker 세션 완전 정리 ==="
          docker logout docker.io 2>/dev/null || true
          docker logout 2>/dev/null || true
          rm -rf ~/.docker/config.json 2>/dev/null || true
          echo "Docker 세션 정리 완료"
          echo ""
          
          echo "=== Docker 로그인 시도 ==="
          set -x  # 명령어 출력 활성화
          echo "${{ secrets.DEPLOY_PASSWORD }}" | docker login docker.io -u "${{ secrets.DEPLOY_USERNAME }}" --password-stdin
          LOGIN_RESULT=$?
          set +x
          
          if [ $LOGIN_RESULT -eq 0 ]; then
            echo "✅ Docker 로그인 성공!"
          else
            echo "❌ Docker 로그인 실패! Exit code: $LOGIN_RESULT"
            exit 1
          fi
          
          echo "=== 로그인 상태 확인 ==="
          if [ -f ~/.docker/config.json ]; then
            echo "Docker config 파일 존재함"
            cat ~/.docker/config.json | jq . 2>/dev/null || cat ~/.docker/config.json
          else
            echo "Docker config 파일 없음"
          fi
          
          echo "=== Docker Hub 인증 테스트 ==="
          docker pull hello-world:latest || echo "Docker pull 테스트 실패"
          
        env:
          DEPLOY_USERNAME: ${{ secrets.DEPLOY_USERNAME }}
          DEPLOY_PASSWORD: ${{ secrets.DEPLOY_PASSWORD }}
          
      - name: 5. 도커 이미지 빌드 및 푸시
        id: docker_build
        run: |
          IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-7)
          IMAGE_NAME="${{ secrets.DEPLOY_USERNAME }}/codify-upload"
          FULL_IMAGE_NAME="${IMAGE_NAME}:${{ env.TAG }}"
          
          echo "=== 빌드 정보 ==="
          echo "Image name: ${IMAGE_NAME}"
          echo "Tag: ${{ env.TAG }}"
          echo "Full image: ${FULL_IMAGE_NAME}"
          echo "GitHub SHA: $GITHUB_SHA"
          echo "Image TAG from SHA: $IMAGE_TAG"
          echo ""
          
          echo "=== Docker 이미지 빌드 ==="
          docker build -t ${FULL_IMAGE_NAME} .
          
          echo "=== 빌드된 이미지 확인 ==="
          docker images | grep codify-upload || echo "빌드된 이미지를 찾을 수 없음"
          
          echo "=== Docker Hub에 푸시 ==="
          docker push ${FULL_IMAGE_NAME}
          
          if [ $? -eq 0 ]; then
            echo "✅ Docker 이미지 푸시 성공!"
          else
            echo "❌ Docker 이미지 푸시 실패!"
            exit 1
          fi
          
          echo "image_tag=${{ env.TAG }}" >> $GITHUB_OUTPUT
          
  # ============================================
  # CD 트리거 Job (매니페스트 업데이트)
  # ============================================
  
  deploy:
    # 'build-and-push' job이 성공해야만 실행됨
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: 1. 매니페스트 리포지토리 체크아웃
        uses: actions/checkout@v4
        with:
          repository: Codify-2025/k8s-manifests
          token: ${{ secrets.DEPLOY_PAT_TOKEN }}
          
      - name: 2. Deployment.yaml 파일의 이미지 태그 업데이트
        working-directory: ./deploy/upload
        run: |
          echo "=== 매니페스트 업데이트 시작 ==="
          echo "Current directory: $(pwd)"
          echo "Image tag: ${{ needs.build-and-push.outputs.image_tag }}"
          echo ""
          
          echo "=== 현재 deployment.yaml 내용 ==="
          cat deployment.yaml | grep -A 2 -B 2 "image:" || echo "image 라인을 찾을 수 없음"
          echo ""
          
          echo "=== 이미지 태그 업데이트 ==="
          sed -i "s|image: ${{ secrets.DEPLOY_USERNAME }}/codify-upload:.*|image: ${{ secrets.DEPLOY_USERNAME }}/codify-upload:${{ needs.build-and-push.outputs.image_tag }}|" deployment.yaml
          
          echo "=== 업데이트된 deployment.yaml 내용 ==="
          cat deployment.yaml | grep -A 2 -B 2 "image:" || echo "업데이트 후 image 라인을 찾을 수 없음"
          
      - name: 3. 변경된 매니페스트 커밋 및 푸시
        run: |
          echo "=== Git 설정 ==="
          git config --global user.name 'dylee00'
          git config --global user.email 'dylee6820@gmail.com'
          
          echo "=== 변경사항 확인 ==="
          git status
          git diff
          
          echo "=== 변경사항 추가 ==="
          git add .
          
          if git diff-index --quiet HEAD; then
            echo "변경사항이 없습니다."
          else
            echo "=== 커밋 및 푸시 ==="
            git commit -m "Deploy: Update upload image to ${{ needs.build-and-push.outputs.image_tag }}"
            git push
            echo "✅ 매니페스트 업데이트 완료!"
          fi
